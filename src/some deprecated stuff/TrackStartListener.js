const BaseListener = require('../structures/BaseListener');

class TrackStartListener extends BaseListener {
    constructor() {
        super('TrackStart', { event: 'trackStart', type: 1 });
    }

    async run(client, player, track) {
        const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js')

        const row = new MessageActionRow()
            .addComponents(
                new MessageButton()
                    .setEmoji('‚è∏')
                    .setStyle("SECONDARY")
                    .setLabel("–ü–∞—É–∑–∞")
                    .setDisabled(false)
                    .setCustomId('pause'),
                new MessageButton()
                    .setEmoji('‚ñ∂')
                    .setStyle("SECONDARY")
                    .setLabel("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
                    .setDisabled(true)
                    .setCustomId('resume'),
                new MessageButton()
                    .setEmoji('‚è≠')
                    .setStyle("SECONDARY")
                    .setLabel("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
                    .setCustomId('skip'),
                new MessageButton()
                    .setEmoji('üîÅ')
                    .setStyle("SECONDARY")
                    .setLabel("–ü–æ–≤—Ç–æ—Ä")
                    .setCustomId('repeat'),
            )

        const embed = new MessageEmbed()
            .setAuthor({name: track.title, url: track.uri})
            .setThumbnail(track.thumbnail)
            .setDescription(`
–ê–≤—Ç–æ—Ä: **${track.author}**
–ü–æ–≤—Ç–æ—Ä: **${player.trackRepeat ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω'}**
–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞: **${player.state}**

–ì—Ä–æ–º–∫–æ—Å—Ç—å: ${player.volume}/${client.lavalink.maxVolume}
${client.functions.progressbar(player.volume, client.lavalink.maxVolume)}

–í—Ä–µ–º—è: ${client.functions.duration(player.position)}/${client.functions.duration(track.duration)}
${`[‚ñ¨](${track.uri})`.repeat(Math.floor(player.position / track.duration * 20)) + '‚ñ¨'.repeat(20 - Math.floor(player.position / track.duration * 20))}
           `)
            .setFooter({text: `${player.node.options.name} #${player.node.options.id}`})
            .setTimestamp()
            .setColor(client.colors.main)
        let message = await client.channels.cache.get(player.textChannel).send({ embeds: [embed], components: [row] })

        const collector = client.channels.cache.get(player.textChannel).createMessageComponentCollector({ time: track.duration })

        collector.on('collect', async b => {
        await b.deferReply()
            if (b.customId === 'pause') return await b.reply('–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ') && player.paused ? b.setDisabled(true) : b.setDisabled(false) && player.pause(true);
            if (b.customId === 'resume') return await b.reply('–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–æ') && !player.paused ? b.setDisabled(true) : b.setDisabled(false) && player.pause(false);
            if (b.customId === 'skip') return await b.reply('–¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω') && player.stop();
            if (b.customId === 'repeat') return await b.reply('–ü–æ–≤—Ç–æ—Ä —Ç—Ä–µ–∫–∞ –≤–∫–ª—é—á–µ–Ω/–≤—ã–∫–ª—é—á–µ–Ω') && player.trackRepeat ? player.setTrackRepeat(true) : player.setTrackRepeat(false);
        })

        let interval = setInterval(() => {
            embed.setDescription(`
–ê–≤—Ç–æ—Ä: **${track.author}**
–ü–æ–≤—Ç–æ—Ä: **${player.trackRepeat ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω'}**
–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞: **${player.state}**

–ì—Ä–æ–º–∫–æ—Å—Ç—å: ${player.volume}/${client.lavalink.maxVolume}
${client.functions.progressbar(player.volume, client.lavalink.maxVolume)}

–í—Ä–µ–º—è: ${client.functions.duration(player.position)}/${client.functions.duration(track.duration)}
${`[‚ñ¨](${track.uri})`.repeat(Math.floor(player.position / track.duration * 20)) + '‚ñ¨'.repeat(20 - Math.floor(player.position / track.duration * 20))}
           `)
            message.edit({embeds: [embed]})
        }, 2000)
        client.activePlayers.set(player.textChannel, {
            textChannel: player.textChannel,
            messageId: client.channels.cache.get(player.textChannel).id,
            interval: interval,
        });
    }
}

module.exports = TrackStartListener;
